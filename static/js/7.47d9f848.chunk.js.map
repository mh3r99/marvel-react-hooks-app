{"version":3,"sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["setContent","process","Component","newItemLoading","Spinner","ErrorMessage","Error","ComicsList","useState","comicsList","setComicsList","setnewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","useMarvelService","setProcess","getAllComics","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","className","arr","items","map","item","i","to","id","src","thumbnail","alt","title","price","renderItems","disabled","style","display","onClick","ComicsPage","Helmet","name","content","AppBanner","_toConsumableArray","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError"],"mappings":"yMAQMA,EAAa,SAACC,EAASC,EAAWC,GACtC,OAAQF,GACN,IAAK,UACH,OAAO,cAACG,EAAA,EAAD,IACT,IAAK,UACH,OAAOD,EAAiB,cAACD,EAAD,IAAgB,cAACE,EAAA,EAAD,IAC1C,IAAK,YACH,OAAO,cAACF,EAAD,IACT,IAAK,QACH,OAAO,cAACG,EAAA,EAAD,IACT,QACE,MAAM,IAAIC,MAAM,8BAqEPC,EAjEI,WACjB,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA4CF,oBAAS,GAArD,mBAAOL,EAAP,KAAuBQ,EAAvB,KACA,EAA4BH,mBAAS,GAArC,mBAAOI,EAAP,KAAeC,EAAf,KACA,EAAsCL,oBAAS,GAA/C,mBAAOM,EAAP,KAAoBC,EAApB,KAEA,EAA8CC,cAAtCf,EAAR,EAAQA,QAASgB,EAAjB,EAAiBA,WAAYC,EAA7B,EAA6BA,aAE7BC,qBAAU,WACRC,EAAUR,GAAQ,KACjB,IAEH,IAAMQ,EAAY,SAACR,EAAQS,GACfV,GAAVU,GACAH,EAAaN,GACVU,KAAKC,GACLD,MAAK,kBAAML,EAAW,iBAGrBM,EAAqB,SAACC,GAC1B,IAAIC,GAAQ,EACRD,EAAcE,OAAS,IACzBD,GAAQ,GAEVf,EAAc,GAAD,mBAAKD,GAAL,YAAoBe,KACjCb,GAAkB,GAClBE,EAAUD,EAAS,GACnBG,EAAeU,IAuBjB,OACE,sBAAKE,UAAU,eAAf,UACG3B,EAAWC,GAAS,kBAtBzB,SAAqB2B,GACnB,IAAMC,EAAQD,EAAIE,KAAI,SAACC,EAAMC,GAC3B,OACE,oBAAIL,UAAU,eAAd,SACE,eAAC,IAAD,CAAMM,GAAE,kBAAaF,EAAKG,IAA1B,UACE,qBACEC,IAAKJ,EAAKK,UACVC,IAAKN,EAAKO,MACVX,UAAU,qBAEZ,qBAAKA,UAAU,oBAAf,SAAoCI,EAAKO,QACzC,qBAAKX,UAAU,qBAAf,SAAqCI,EAAKQ,YARZP,MActC,OAAO,oBAAIL,UAAU,eAAd,SAA8BE,IAKRW,CAAY/B,KAAaN,GACpD,wBACEsC,SAAUtC,EACVuC,MAAO,CAAEC,QAAS7B,EAAc,OAAS,SACzCa,UAAU,mCACViB,QAAS,kBAAMxB,EAAUR,IAJ3B,SAME,qBAAKe,UAAU,QAAf,6B,iBCjEOkB,UAbI,WACjB,OACE,qCACE,eAACC,EAAA,EAAD,WACE,sBAAMC,KAAK,cAAcC,QAAQ,iCACjC,mDAEF,cAACC,EAAA,EAAD,IACA,cAAC,EAAD,S,0FCRS,SAASC,EAAmBtB,GACzC,OCJa,SAA4BA,GACzC,GAAIuB,MAAMC,QAAQxB,GAAM,OAAO,OAAAyB,EAAA,GAAiBzB,GDGzC,CAAkBA,IELZ,SAA0B0B,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgB1B,IAAQ,OAAA+B,EAAA,GAA2B/B,IGLvE,WACb,MAAM,IAAIgC,UAAU,wIHIwE","file":"static/js/7.47d9f848.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport \"./comicsList.scss\";\nimport { Link } from \"react-router-dom\";\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case \"waiting\":\n      return <Spinner />;\n    case \"loading\":\n      return newItemLoading ? <Component /> : <Spinner />;\n    case \"confirmed\":\n      return <Component />;\n    case \"error\":\n      return <ErrorMessage />;\n    default:\n      throw new Error(\"Unexpected process state\");\n  }\n};\n\nconst ComicsList = () => {\n  const [comicsList, setComicsList] = useState([]);\n  const [newItemLoading, setnewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(0);\n  const [comicsEnded, setComicsEnded] = useState(false);\n\n  const { process, setProcess, getAllComics } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setnewItemLoading(false) : setnewItemLoading(true);\n    getAllComics(offset)\n      .then(onComicsListLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const onComicsListLoaded = (newComicsList) => {\n    let ended = false;\n    if (newComicsList.length < 8) {\n      ended = true;\n    }\n    setComicsList([...comicsList, ...newComicsList]);\n    setnewItemLoading(false);\n    setOffset(offset + 8);\n    setComicsEnded(ended);\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      return (\n        <li className=\"comics__item\" key={i}>\n          <Link to={`/comics/${item.id}`}>\n            <img\n              src={item.thumbnail}\n              alt={item.title}\n              className=\"comics__item-img\"\n            />\n            <div className=\"comics__item-name\">{item.title}</div>\n            <div className=\"comics__item-price\">{item.price}</div>\n          </Link>\n        </li>\n      );\n    });\n\n    return <ul className=\"comics__grid\">{items}</ul>;\n  }\n\n  return (\n    <div className=\"comics__list\">\n      {setContent(process, () => renderItems(comicsList), newItemLoading)}\n      <button\n        disabled={newItemLoading}\n        style={{ display: comicsEnded ? \"none\" : \"block\" }}\n        className=\"button button__main button__long\"\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nexport default ComicsList;\n","import ComicsList from \"../comicsList/ComicsList\";\nimport AppBanner from \"../appBanner/AppBanner\";\nimport { Helmet } from \"react-helmet\";\n\nconst ComicsPage = () => {\n  return (\n    <>\n      <Helmet>\n        <meta name=\"description\" content=\"Page with list of our comics\" />\n        <title>Comics page</title>\n      </Helmet>\n      <AppBanner />\n      <ComicsList />\n    </>\n  );\n};\n\nexport default ComicsPage;\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}